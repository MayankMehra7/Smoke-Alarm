# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XuaH8-TFGZXFAOeclWOkn8qOJfbCJsiX
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

dataset_df=pd.read_csv("smoke_detection_iot.csv")
dataset_df.head()

dataset_df.shape

dataset_df.isnull().sum()

dataset_df.drop(["Unnamed: 0"],axis=1,inplace=True)
dataset_df

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

X = dataset_df.drop(["Temperature[C]"],axis=1)
y = dataset_df['Temperature[C]']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)
sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)
models = [
    LinearRegression(),
    DecisionTreeRegressor(),
    RandomForestRegressor()
]
for model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
print("Predicted Value",y_pred)

from math import gcd
from queue import Queue

def find_minimum_operations(N):
    min_ops = float('inf')
    for i in range(1, N+1):
        visited = set()
        q = Queue()
        q.put(i)
        ops = 0
        while not q.empty():
            size = q.qsize()
            for _ in range(size):
                curr = q.get()
                visited.add(curr)
                for j in range(1, N+1):
                    if j != curr and gcd(j, curr) > 1 and gcd(j, curr) < curr:
                        if j not in visited:
                            q.put(j)
            ops += 1
        if len(visited) == N:
            min_ops = min(min_ops, ops)
    return min_ops

from sklearn.metrics import mean_squared_error
import math
for model in models:
    mse = mean_squared_error(y_test, y_pred)
    print(f'{type(model).__name__} Mean Squared Error: {mse}')

    rmse =  math.sqrt(mse)  
    print(f'{type(model).__name__} Root Mean Squared Error: {rmse}')
